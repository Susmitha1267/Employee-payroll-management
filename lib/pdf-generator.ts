// PDF generation utilities for salary slips and reports
export interface PDFSalarySlipData {
  employee: {
    name: string
    id: string
    department: string
    designation: string
    email: string
  }
  payPeriod: {
    month: string
    year: number
    workingDays: number
    paidDays: number
  }
  earnings: {
    basic: number
    allowances: Array<{ name: string; amount: number }>
    bonuses: Array<{ name: string; amount: number }>
    total: number
  }
  deductions: {
    statutory: Array<{ name: string; amount: number }>
    taxes: Array<{ name: string; amount: number }>
    leaves: number
    total: number
  }
  netSalary: number
  currency: string
}

export interface PDFReportData {
  title: string
  period: string
  generatedBy: string
  generatedDate: string
  data: any[]
  summary: Record<string, any>
}

// Simulate PDF generation (in a real app, you'd use libraries like jsPDF or react-pdf)
export function generateSalarySlipPDF(data: PDFSalarySlipData): Promise<Blob> {
  return new Promise((resolve) => {
    setTimeout(() => {
      // Create a mock PDF blob
      const pdfContent = `
PAYROLL SLIP
============

Employee: ${data.employee.name} (${data.employee.id})
Department: ${data.employee.department}
Designation: ${data.employee.designation}
Pay Period: ${data.payPeriod.month} ${data.payPeriod.year}

EARNINGS:
Basic Pay: ${data.currency}${data.earnings.basic.toLocaleString()}
${data.earnings.allowances.map((a) => `${a.name}: ${data.currency}${a.amount.toLocaleString()}`).join("\n")}
${data.earnings.bonuses.map((b) => `${b.name}: ${data.currency}${b.amount.toLocaleString()}`).join("\n")}
Total Earnings: ${data.currency}${data.earnings.total.toLocaleString()}

DEDUCTIONS:
${data.deductions.statutory.map((d) => `${d.name}: ${data.currency}${d.amount.toLocaleString()}`).join("\n")}
${data.deductions.taxes.map((t) => `${t.name}: ${data.currency}${t.amount.toLocaleString()}`).join("\n")}
Leave Deductions: ${data.currency}${data.deductions.leaves.toLocaleString()}
Total Deductions: ${data.currency}${data.deductions.total.toLocaleString()}

NET SALARY: ${data.currency}${data.netSalary.toLocaleString()}

Generated on: ${new Date().toLocaleDateString()}
      `

      const blob = new Blob([pdfContent], { type: "application/pdf" })
      resolve(blob)
    }, 1500)
  })
}

export function generateReportPDF(data: PDFReportData): Promise<Blob> {
  return new Promise((resolve) => {
    setTimeout(() => {
      const pdfContent = `
${data.title.toUpperCase()}
${"=".repeat(data.title.length)}

Period: ${data.period}
Generated by: ${data.generatedBy}
Generated on: ${data.generatedDate}

SUMMARY:
${Object.entries(data.summary)
  .map(([key, value]) => `${key}: ${value}`)
  .join("\n")}

DATA:
${JSON.stringify(data.data, null, 2)}
      `

      const blob = new Blob([pdfContent], { type: "application/pdf" })
      resolve(blob)
    }, 2000)
  })
}

export function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob)
  const link = document.createElement("a")
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
